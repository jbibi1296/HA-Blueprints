blueprint:
  name: AC Thermostat with Day/Night Modes
  description: Automatically controls an AC unit based on a temperature sensor, with separate day and night schedules for time and temperature.
  domain: automation
  source_url: https://gist.github.com/yourusername/somehash

  input:
    temperature_sensor:
      name: Temperature Sensor
      description: The temperature sensor entity to monitor.
      selector:
        entity:
          domain: sensor
          device_class: temperature
    
    ac_outlet:
      name: AC Outlet
      description: The outlet entity connected to the AC unit.
      selector:
        entity:
          domain: switch
          device_class: outlet

    # Day Schedule Inputs
    day_temperature_high:
      name: Day - Turn on temperature
      description: Temperature (in your system's unit) to turn on the AC during the day.
      default: 75
      selector:
        number:
          min: 60
          max: 90
          step: 1
          unit_of_measurement: "°F" # or °C
          mode: box
          
    day_temperature_low:
      name: Day - Turn off temperature
      description: Temperature (in your system's unit) to turn off the AC during the day.
      default: 72
      selector:
        number:
          min: 60
          max: 90
          step: 1
          unit_of_measurement: "°F" # or °C
          mode: box

    day_time_start:
      name: Day - Start Time
      description: The time of day to begin the day schedule.
      selector:
        time:

    day_time_end:
      name: Day - End Time
      description: The time of day to end the day schedule.
      selector:
        time:

    # Night Schedule Inputs
    night_temperature_high:
      name: Night - Turn on temperature
      description: Temperature (in your system's unit) to turn on the AC at night.
      default: 70
      selector:
        number:
          min: 60
          max: 90
          step: 1
          unit_of_measurement: "°F" # or °C
          mode: box
          
    night_temperature_low:
      name: Night - Turn off temperature
      description: Temperature (in your system's unit) to turn off the AC at night.
      default: 68
      selector:
        number:
          min: 60
          max: 90
          step: 1
          unit_of_measurement: "°F" # or °C
          mode: box

    night_time_start:
      name: Night - Start Time
      description: The time of day to begin the night schedule.
      selector:
        time:

    night_time_end:
      name: Night - End Time
      description: The time of day to end the night schedule.
      selector:
        time:
    
    # Days of the week input
    days_of_week:
      name: Days of the week
      description: The days to run the automation.
      selector:
        select:
          multiple: true
          options:
            - label: Monday
              value: mon
            - label: Tuesday
              value: tue
            - label: Wednesday
              value: wed
            - label: Thursday
              value: thu
            - label: Friday
              value: fri
            - label: Saturday
              value: sat
            - label: Sunday
              value: sun

variables:
  ac_outlet: !input ac_outlet
  temperature_sensor: !input temperature_sensor
  days_of_week: !input days_of_week
  
  # The following variables will be dynamically set based on the time of day
  temperature_high: >-
    {% if now().strftime('%H:%M') > states('input_datetime.dummy_night_start') and now().strftime('%H:%M') < states('input_datetime.dummy_night_end') %}
      {{ states('input_number.dummy_night_high') }}
    {% else %}
      {{ states('input_number.dummy_day_high') }}
    {% endif %}
    
  temperature_low: >-
    {% if now().strftime('%H:%M') > states('input_datetime.dummy_night_start') and now().strftime('%H:%M') < states('input_datetime.dummy_night_end') %}
      {{ states('input_number.dummy_night_low') }}
    {% else %}
      {{ states('input_number.dummy_day_low') }}
    {% endif %}

trigger:
  - platform: state
    entity_id: !input temperature_sensor

condition:
  - condition: time
    weekday: !input days_of_week
  - condition: numeric_state
    entity_id: !input temperature_sensor
    above: "{{ temperature_high }}"

action:
  - choose:
      - conditions:
          - condition: numeric_state
            entity_id: !input temperature_sensor
            above: "{{ temperature_high | float }}"
          - condition: time
            after: !input day_time_start
            before: !input day_time_end
        sequence:
          - service: switch.turn_on
            target:
              entity_id: !input ac_outlet
      
      - conditions:
          - condition: numeric_state
            entity_id: !input temperature_sensor
            below: "{{ temperature_low | float }}"
          - condition: time
            after: !input day_time_start
            before: !input day_time_end
        sequence:
          - service: switch.turn_off
            target:
              entity_id: !input ac_outlet
              
      - conditions:
          - condition: numeric_state
            entity_id: !input temperature_sensor
            above: "{{ temperature_high | float }}"
          - condition: time
            after: !input night_time_start
            before: !input night_time_end
        sequence:
          - service: switch.turn_on
            target:
              entity_id: !input ac_outlet
      
      - conditions:
          - condition: numeric_state
            entity_id: !input temperature_sensor
            below: "{{ temperature_low | float }}"
          - condition: time
            after: !input night_time_start
            before: !input night_time_end
        sequence:
          - service: switch.turn_off
            target:
              entity_id: !input ac_outlet

